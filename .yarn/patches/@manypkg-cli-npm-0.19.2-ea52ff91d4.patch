diff --git a/dist/cli.cjs.dev.js b/dist/cli.cjs.dev.js
index 6f836f85e5881b60bc0bb1f730a81663a63fb494..d7b59a0fa5c5392688af925577745c5a952553e5 100644
--- a/dist/cli.cjs.dev.js
+++ b/dist/cli.cjs.dev.js
@@ -307,89 +307,89 @@ var EXTERNAL_MISMATCH = makeCheck({
   type: "all"
 });
 
-var INTERNAL_MISMATCH = makeCheck({
-  validate: function validate(workspace, allWorkspaces) {
-    var errors = [];
-    var _iteratorNormalCompletion = true;
-    var _didIteratorError = false;
-    var _iteratorError = undefined;
-
-    try {
-      for (var _iterator = NORMAL_DEPENDENCY_TYPES[Symbol.iterator](), _step; !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true) {
-        var depType = _step.value;
-        var deps = workspace.packageJson[depType];
-
-        if (deps) {
-          for (var depName in deps) {
-            var range = deps[depName];
-            var dependencyWorkspace = allWorkspaces.get(depName);
-
-            if (dependencyWorkspace !== undefined && !semver__default.satisfies(dependencyWorkspace.packageJson.version, range)) {
-              errors.push({
-                type: "INTERNAL_MISMATCH",
-                workspace: workspace,
-                dependencyWorkspace: dependencyWorkspace,
-                dependencyRange: range
-              });
-            }
-          }
-        }
-      }
-    } catch (err) {
-      _didIteratorError = true;
-      _iteratorError = err;
-    } finally {
-      try {
-        if (!_iteratorNormalCompletion && _iterator["return"] != null) {
-          _iterator["return"]();
-        }
-      } finally {
-        if (_didIteratorError) {
-          throw _iteratorError;
-        }
-      }
-    }
-
-    return errors;
-  },
-  fix: function fix(error) {
-    var _iteratorNormalCompletion2 = true;
-    var _didIteratorError2 = false;
-    var _iteratorError2 = undefined;
-
-    try {
-      for (var _iterator2 = NORMAL_DEPENDENCY_TYPES[Symbol.iterator](), _step2; !(_iteratorNormalCompletion2 = (_step2 = _iterator2.next()).done); _iteratorNormalCompletion2 = true) {
-        var depType = _step2.value;
-        var deps = error.workspace.packageJson[depType];
-
-        if (deps && deps[error.dependencyWorkspace.packageJson.name]) {
-          deps[error.dependencyWorkspace.packageJson.name] = versionRangeToRangeType(deps[error.dependencyWorkspace.packageJson.name]) + error.dependencyWorkspace.packageJson.version;
-        }
-      }
-    } catch (err) {
-      _didIteratorError2 = true;
-      _iteratorError2 = err;
-    } finally {
-      try {
-        if (!_iteratorNormalCompletion2 && _iterator2["return"] != null) {
-          _iterator2["return"]();
-        }
-      } finally {
-        if (_didIteratorError2) {
-          throw _iteratorError2;
-        }
-      }
-    }
-
-    return {
-      requiresInstall: true
-    };
-  },
-  print: function print(error) {
-    return "".concat(error.workspace.packageJson.name, " has a dependency on ").concat(error.dependencyWorkspace.packageJson.name, "@").concat(error.dependencyRange, " but the version of ").concat(error.dependencyWorkspace.packageJson.name, " in the repo is ").concat(error.dependencyWorkspace.packageJson.version, " which is not within range of the depended on version, please update the dependency version");
-  },
-  type: "all"
-});
+// var INTERNAL_MISMATCH = makeCheck({
+//   validate: function validate(workspace, allWorkspaces) {
+//     var errors = [];
+//     var _iteratorNormalCompletion = true;
+//     var _didIteratorError = false;
+//     var _iteratorError = undefined;
+
+//     try {
+//       for (var _iterator = NORMAL_DEPENDENCY_TYPES[Symbol.iterator](), _step; !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true) {
+//         var depType = _step.value;
+//         var deps = workspace.packageJson[depType];
+
+//         if (deps) {
+//           for (var depName in deps) {
+//             var range = deps[depName];
+//             var dependencyWorkspace = allWorkspaces.get(depName);
+
+//             if (dependencyWorkspace !== undefined && !semver__default.satisfies(dependencyWorkspace.packageJson.version, range)) {
+//               errors.push({
+//                 type: "INTERNAL_MISMATCH",
+//                 workspace: workspace,
+//                 dependencyWorkspace: dependencyWorkspace,
+//                 dependencyRange: range
+//               });
+//             }
+//           }
+//         }
+//       }
+//     } catch (err) {
+//       _didIteratorError = true;
+//       _iteratorError = err;
+//     } finally {
+//       try {
+//         if (!_iteratorNormalCompletion && _iterator["return"] != null) {
+//           _iterator["return"]();
+//         }
+//       } finally {
+//         if (_didIteratorError) {
+//           throw _iteratorError;
+//         }
+//       }
+//     }
+
+//     return errors;
+//   },
+//   fix: function fix(error) {
+//     var _iteratorNormalCompletion2 = true;
+//     var _didIteratorError2 = false;
+//     var _iteratorError2 = undefined;
+
+//     try {
+//       for (var _iterator2 = NORMAL_DEPENDENCY_TYPES[Symbol.iterator](), _step2; !(_iteratorNormalCompletion2 = (_step2 = _iterator2.next()).done); _iteratorNormalCompletion2 = true) {
+//         var depType = _step2.value;
+//         var deps = error.workspace.packageJson[depType];
+
+//         if (deps && deps[error.dependencyWorkspace.packageJson.name]) {
+//           deps[error.dependencyWorkspace.packageJson.name] = versionRangeToRangeType(deps[error.dependencyWorkspace.packageJson.name]) + error.dependencyWorkspace.packageJson.version;
+//         }
+//       }
+//     } catch (err) {
+//       _didIteratorError2 = true;
+//       _iteratorError2 = err;
+//     } finally {
+//       try {
+//         if (!_iteratorNormalCompletion2 && _iterator2["return"] != null) {
+//           _iterator2["return"]();
+//         }
+//       } finally {
+//         if (_didIteratorError2) {
+//           throw _iteratorError2;
+//         }
+//       }
+//     }
+
+//     return {
+//       requiresInstall: true
+//     };
+//   },
+//   print: function print(error) {
+//     return "".concat(error.workspace.packageJson.name, " has a dependency on ").concat(error.dependencyWorkspace.packageJson.name, "@").concat(error.dependencyRange, " but the version of ").concat(error.dependencyWorkspace.packageJson.name, " in the repo is ").concat(error.dependencyWorkspace.packageJson.version, " which is not within range of the depended on version, please update the dependency version");
+//   },
+//   type: "all"
+// });
 
 var INVALID_DEV_AND_PEER_DEPENDENCY_RELATIONSHIP = makeCheck({
   type: "all",
@@ -702,7 +702,7 @@ var INCORRECT_REPOSITORY_FIELD = makeCheck({
 
 var checks = {
   EXTERNAL_MISMATCH: EXTERNAL_MISMATCH,
-  INTERNAL_MISMATCH: INTERNAL_MISMATCH,
+  // INTERNAL_MISMATCH: INTERNAL_MISMATCH,
   INVALID_DEV_AND_PEER_DEPENDENCY_RELATIONSHIP: INVALID_DEV_AND_PEER_DEPENDENCY_RELATIONSHIP,
   INVALID_PACKAGE_NAME: INVALID_PACKAGE_NAME,
   MULTIPLE_DEPENDENCY_TYPES: MULTIPLE_DEPENDENCY_TYPES,
diff --git a/dist/cli.cjs.prod.js b/dist/cli.cjs.prod.js
index 04bf63038d9fbf3270aea4ef8b644244392f1975..b7c7f244a1655f109a44521f6f608d8db3d3c872 100644
--- a/dist/cli.cjs.prod.js
+++ b/dist/cli.cjs.prod.js
@@ -173,57 +173,6 @@ var EXTERNAL_MISMATCH = makeCheck({
     return "".concat(error.workspace.packageJson.name, " has a dependency on ").concat(error.dependencyName, "@").concat(error.dependencyRange, " but the most common range in the repo is ").concat(error.mostCommonDependencyRange, ", the range should be set to ").concat(error.mostCommonDependencyRange);
   },
   type: "all"
-}), INTERNAL_MISMATCH = makeCheck({
-  validate: function(workspace, allWorkspaces) {
-    var errors = [], _iteratorNormalCompletion = !0, _didIteratorError = !1, _iteratorError = void 0;
-    try {
-      for (var _step, _iterator = NORMAL_DEPENDENCY_TYPES[Symbol.iterator](); !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = !0) {
-        var depType = _step.value, deps = workspace.packageJson[depType];
-        if (deps) for (var depName in deps) {
-          var range = deps[depName], dependencyWorkspace = allWorkspaces.get(depName);
-          void 0 === dependencyWorkspace || semver__default.satisfies(dependencyWorkspace.packageJson.version, range) || errors.push({
-            type: "INTERNAL_MISMATCH",
-            workspace: workspace,
-            dependencyWorkspace: dependencyWorkspace,
-            dependencyRange: range
-          });
-        }
-      }
-    } catch (err) {
-      _didIteratorError = !0, _iteratorError = err;
-    } finally {
-      try {
-        _iteratorNormalCompletion || null == _iterator.return || _iterator.return();
-      } finally {
-        if (_didIteratorError) throw _iteratorError;
-      }
-    }
-    return errors;
-  },
-  fix: function(error) {
-    var _iteratorNormalCompletion2 = !0, _didIteratorError2 = !1, _iteratorError2 = void 0;
-    try {
-      for (var _step2, _iterator2 = NORMAL_DEPENDENCY_TYPES[Symbol.iterator](); !(_iteratorNormalCompletion2 = (_step2 = _iterator2.next()).done); _iteratorNormalCompletion2 = !0) {
-        var depType = _step2.value, deps = error.workspace.packageJson[depType];
-        deps && deps[error.dependencyWorkspace.packageJson.name] && (deps[error.dependencyWorkspace.packageJson.name] = versionRangeToRangeType(deps[error.dependencyWorkspace.packageJson.name]) + error.dependencyWorkspace.packageJson.version);
-      }
-    } catch (err) {
-      _didIteratorError2 = !0, _iteratorError2 = err;
-    } finally {
-      try {
-        _iteratorNormalCompletion2 || null == _iterator2.return || _iterator2.return();
-      } finally {
-        if (_didIteratorError2) throw _iteratorError2;
-      }
-    }
-    return {
-      requiresInstall: !0
-    };
-  },
-  print: function(error) {
-    return "".concat(error.workspace.packageJson.name, " has a dependency on ").concat(error.dependencyWorkspace.packageJson.name, "@").concat(error.dependencyRange, " but the version of ").concat(error.dependencyWorkspace.packageJson.name, " in the repo is ").concat(error.dependencyWorkspace.packageJson.version, " which is not within range of the depended on version, please update the dependency version");
-  },
-  type: "all"
 }), INVALID_DEV_AND_PEER_DEPENDENCY_RELATIONSHIP = makeCheck({
   type: "all",
   validate: function(workspace, allWorkspaces) {
@@ -427,7 +376,7 @@ var ROOT_HAS_DEV_DEPENDENCIES = makeCheck({
   }
 }), checks = {
   EXTERNAL_MISMATCH: EXTERNAL_MISMATCH,
-  INTERNAL_MISMATCH: INTERNAL_MISMATCH,
+  // INTERNAL_MISMATCH: INTERNAL_MISMATCH,
   INVALID_DEV_AND_PEER_DEPENDENCY_RELATIONSHIP: INVALID_DEV_AND_PEER_DEPENDENCY_RELATIONSHIP,
   INVALID_PACKAGE_NAME: INVALID_PACKAGE_NAME,
   MULTIPLE_DEPENDENCY_TYPES: MULTIPLE_DEPENDENCY_TYPES,
diff --git a/dist/cli.esm.js b/dist/cli.esm.js
index 2456928e1c5f90b43ab8c28853f77eea82cfc1da..7c300bbd135df7cf912381b4b3e0347c0a104ca1 100644
--- a/dist/cli.esm.js
+++ b/dist/cli.esm.js
@@ -302,89 +302,89 @@ var EXTERNAL_MISMATCH = makeCheck({
   type: "all"
 });
 
-var INTERNAL_MISMATCH = makeCheck({
-  validate: function validate(workspace, allWorkspaces) {
-    var errors = [];
-    var _iteratorNormalCompletion = true;
-    var _didIteratorError = false;
-    var _iteratorError = undefined;
-
-    try {
-      for (var _iterator = NORMAL_DEPENDENCY_TYPES[Symbol.iterator](), _step; !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true) {
-        var depType = _step.value;
-        var deps = workspace.packageJson[depType];
-
-        if (deps) {
-          for (var depName in deps) {
-            var range = deps[depName];
-            var dependencyWorkspace = allWorkspaces.get(depName);
-
-            if (dependencyWorkspace !== undefined && !semver__default.satisfies(dependencyWorkspace.packageJson.version, range)) {
-              errors.push({
-                type: "INTERNAL_MISMATCH",
-                workspace: workspace,
-                dependencyWorkspace: dependencyWorkspace,
-                dependencyRange: range
-              });
-            }
-          }
-        }
-      }
-    } catch (err) {
-      _didIteratorError = true;
-      _iteratorError = err;
-    } finally {
-      try {
-        if (!_iteratorNormalCompletion && _iterator["return"] != null) {
-          _iterator["return"]();
-        }
-      } finally {
-        if (_didIteratorError) {
-          throw _iteratorError;
-        }
-      }
-    }
-
-    return errors;
-  },
-  fix: function fix(error) {
-    var _iteratorNormalCompletion2 = true;
-    var _didIteratorError2 = false;
-    var _iteratorError2 = undefined;
-
-    try {
-      for (var _iterator2 = NORMAL_DEPENDENCY_TYPES[Symbol.iterator](), _step2; !(_iteratorNormalCompletion2 = (_step2 = _iterator2.next()).done); _iteratorNormalCompletion2 = true) {
-        var depType = _step2.value;
-        var deps = error.workspace.packageJson[depType];
-
-        if (deps && deps[error.dependencyWorkspace.packageJson.name]) {
-          deps[error.dependencyWorkspace.packageJson.name] = versionRangeToRangeType(deps[error.dependencyWorkspace.packageJson.name]) + error.dependencyWorkspace.packageJson.version;
-        }
-      }
-    } catch (err) {
-      _didIteratorError2 = true;
-      _iteratorError2 = err;
-    } finally {
-      try {
-        if (!_iteratorNormalCompletion2 && _iterator2["return"] != null) {
-          _iterator2["return"]();
-        }
-      } finally {
-        if (_didIteratorError2) {
-          throw _iteratorError2;
-        }
-      }
-    }
-
-    return {
-      requiresInstall: true
-    };
-  },
-  print: function print(error) {
-    return "".concat(error.workspace.packageJson.name, " has a dependency on ").concat(error.dependencyWorkspace.packageJson.name, "@").concat(error.dependencyRange, " but the version of ").concat(error.dependencyWorkspace.packageJson.name, " in the repo is ").concat(error.dependencyWorkspace.packageJson.version, " which is not within range of the depended on version, please update the dependency version");
-  },
-  type: "all"
-});
+// var INTERNAL_MISMATCH = makeCheck({
+//   validate: function validate(workspace, allWorkspaces) {
+//     var errors = [];
+//     var _iteratorNormalCompletion = true;
+//     var _didIteratorError = false;
+//     var _iteratorError = undefined;
+
+//     try {
+//       for (var _iterator = NORMAL_DEPENDENCY_TYPES[Symbol.iterator](), _step; !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true) {
+//         var depType = _step.value;
+//         var deps = workspace.packageJson[depType];
+
+//         if (deps) {
+//           for (var depName in deps) {
+//             var range = deps[depName];
+//             var dependencyWorkspace = allWorkspaces.get(depName);
+
+//             if (dependencyWorkspace !== undefined && !semver__default.satisfies(dependencyWorkspace.packageJson.version, range)) {
+//               errors.push({
+//                 type: "INTERNAL_MISMATCH",
+//                 workspace: workspace,
+//                 dependencyWorkspace: dependencyWorkspace,
+//                 dependencyRange: range
+//               });
+//             }
+//           }
+//         }
+//       }
+//     } catch (err) {
+//       _didIteratorError = true;
+//       _iteratorError = err;
+//     } finally {
+//       try {
+//         if (!_iteratorNormalCompletion && _iterator["return"] != null) {
+//           _iterator["return"]();
+//         }
+//       } finally {
+//         if (_didIteratorError) {
+//           throw _iteratorError;
+//         }
+//       }
+//     }
+
+//     return errors;
+//   },
+//   fix: function fix(error) {
+//     var _iteratorNormalCompletion2 = true;
+//     var _didIteratorError2 = false;
+//     var _iteratorError2 = undefined;
+
+//     try {
+//       for (var _iterator2 = NORMAL_DEPENDENCY_TYPES[Symbol.iterator](), _step2; !(_iteratorNormalCompletion2 = (_step2 = _iterator2.next()).done); _iteratorNormalCompletion2 = true) {
+//         var depType = _step2.value;
+//         var deps = error.workspace.packageJson[depType];
+
+//         if (deps && deps[error.dependencyWorkspace.packageJson.name]) {
+//           deps[error.dependencyWorkspace.packageJson.name] = versionRangeToRangeType(deps[error.dependencyWorkspace.packageJson.name]) + error.dependencyWorkspace.packageJson.version;
+//         }
+//       }
+//     } catch (err) {
+//       _didIteratorError2 = true;
+//       _iteratorError2 = err;
+//     } finally {
+//       try {
+//         if (!_iteratorNormalCompletion2 && _iterator2["return"] != null) {
+//           _iterator2["return"]();
+//         }
+//       } finally {
+//         if (_didIteratorError2) {
+//           throw _iteratorError2;
+//         }
+//       }
+//     }
+
+//     return {
+//       requiresInstall: true
+//     };
+//   },
+//   print: function print(error) {
+//     return "".concat(error.workspace.packageJson.name, " has a dependency on ").concat(error.dependencyWorkspace.packageJson.name, "@").concat(error.dependencyRange, " but the version of ").concat(error.dependencyWorkspace.packageJson.name, " in the repo is ").concat(error.dependencyWorkspace.packageJson.version, " which is not within range of the depended on version, please update the dependency version");
+//   },
+//   type: "all"
+// });
 
 var INVALID_DEV_AND_PEER_DEPENDENCY_RELATIONSHIP = makeCheck({
   type: "all",
@@ -697,7 +697,7 @@ var INCORRECT_REPOSITORY_FIELD = makeCheck({
 
 var checks = {
   EXTERNAL_MISMATCH: EXTERNAL_MISMATCH,
-  INTERNAL_MISMATCH: INTERNAL_MISMATCH,
+  // INTERNAL_MISMATCH: INTERNAL_MISMATCH,
   INVALID_DEV_AND_PEER_DEPENDENCY_RELATIONSHIP: INVALID_DEV_AND_PEER_DEPENDENCY_RELATIONSHIP,
   INVALID_PACKAGE_NAME: INVALID_PACKAGE_NAME,
   MULTIPLE_DEPENDENCY_TYPES: MULTIPLE_DEPENDENCY_TYPES,
diff --git a/src/checks/.DS_Store b/src/checks/.DS_Store
new file mode 100644
index 0000000000000000000000000000000000000000..5008ddfcf53c02e82d7eee2e57c38e5672ef89f6
--- /dev/null
+++ b/src/checks/.DS_Store
@@ -0,0 +1 @@
+   Bud1            %                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                 @      �                                        @      �                                          @      �                                          @                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                   E   %                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                       DSDB                             `          �                                           @      �                                          @      �                                          @                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                              
\ No newline at end of file
diff --git a/src/checks/INTERNAL_MISMATCH.ts b/src/checks/INTERNAL_MISMATCH.ts
deleted file mode 100644
index 9e9c8a0d71735dca8d2d3d0cd85162ef34115b4c..0000000000000000000000000000000000000000
--- a/src/checks/INTERNAL_MISMATCH.ts
+++ /dev/null
@@ -1,57 +0,0 @@
-import {
-  makeCheck,
-  NORMAL_DEPENDENCY_TYPES,
-  versionRangeToRangeType
-} from "./utils";
-import semver from "semver";
-import { Package } from "@manypkg/get-packages";
-
-export type ErrorType = {
-  type: "INTERNAL_MISMATCH";
-  workspace: Package;
-  dependencyWorkspace: Package;
-  dependencyRange: string;
-};
-
-export default makeCheck<ErrorType>({
-  validate: (workspace, allWorkspaces) => {
-    let errors: ErrorType[] = [];
-    for (let depType of NORMAL_DEPENDENCY_TYPES) {
-      let deps = workspace.packageJson[depType];
-      if (deps) {
-        for (let depName in deps) {
-          let range = deps[depName];
-          let dependencyWorkspace = allWorkspaces.get(depName);
-          if (
-            dependencyWorkspace !== undefined &&
-            !semver.satisfies(dependencyWorkspace.packageJson.version, range)
-          ) {
-            errors.push({
-              type: "INTERNAL_MISMATCH",
-              workspace,
-              dependencyWorkspace,
-              dependencyRange: range
-            });
-          }
-        }
-      }
-    }
-
-    return errors;
-  },
-  fix: error => {
-    for (let depType of NORMAL_DEPENDENCY_TYPES) {
-      let deps = error.workspace.packageJson[depType];
-      if (deps && deps[error.dependencyWorkspace.packageJson.name]) {
-        deps[error.dependencyWorkspace.packageJson.name] =
-          versionRangeToRangeType(
-            deps[error.dependencyWorkspace.packageJson.name]
-          ) + error.dependencyWorkspace.packageJson.version;
-      }
-    }
-    return { requiresInstall: true };
-  },
-  print: error =>
-    `${error.workspace.packageJson.name} has a dependency on ${error.dependencyWorkspace.packageJson.name}@${error.dependencyRange} but the version of ${error.dependencyWorkspace.packageJson.name} in the repo is ${error.dependencyWorkspace.packageJson.version} which is not within range of the depended on version, please update the dependency version`,
-  type: "all"
-});
diff --git a/src/checks/index.ts b/src/checks/index.ts
index 5cac343b832aa493364e6dfc0f66c1bae657e7fb..7e0f7c7098ab6ac68f5e2d639a88f956f9fd048a 100644
--- a/src/checks/index.ts
+++ b/src/checks/index.ts
@@ -1,5 +1,4 @@
 import EXTERNAL_MISMATCH from "./EXTERNAL_MISMATCH";
-import INTERNAL_MISMATCH from "./INTERNAL_MISMATCH";
 import INVALID_DEV_AND_PEER_DEPENDENCY_RELATIONSHIP from "./INVALID_DEV_AND_PEER_DEPENDENCY_RELATIONSHIP";
 import INVALID_PACKAGE_NAME from "./INVALID_PACKAGE_NAME";
 import MULTIPLE_DEPENDENCY_TYPES from "./MULTIPLE_DEPENDENCY_TYPES";
@@ -9,7 +8,7 @@ import INCORRECT_REPOSITORY_FIELD from "./INCORRECT_REPOSITORY_FIELD";
 
 export let checks = {
   EXTERNAL_MISMATCH,
-  INTERNAL_MISMATCH,
+  // INTERNAL_MISMATCH,
   INVALID_DEV_AND_PEER_DEPENDENCY_RELATIONSHIP,
   INVALID_PACKAGE_NAME,
   MULTIPLE_DEPENDENCY_TYPES,
